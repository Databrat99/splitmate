scott
WITH MyCTE ( CategoryId, OrderYear, SalesAmount )
As
(
	SELECT CategoryId, YEAR(OrderDate) AS OrderYear, od.UnitPrice * Quantity AS SalesAmount
	FROM Products p JOIN [Order Details] od
		ON p.ProductId = od.ProductId
	JOIN Orders o
		ON o.OrderId = od.OrderId
)
SELECT * 
FROM MyCTE
PIVOT (
	SUM ( SalesAmount )
	FOR CategoryId
	IN ( [1], [2], [3] )
) As pvt
ORDER BY OrderYear

----------------------------------------------------------------
Scott

SELECT * 
FROM #SalesByYear
UNPIVOT (
	SalesAmount-- What you want to unpivot
	FOR CategoryId -- Give the "new" column a name
	IN ( [1], [2], [3], [4], [5], [6], [7], [8] )-- which columns do you want to convert into row values?
) AS x
ORDER BY OrderYear, CategoryId



DECLARE @columns NVARCHAR(MAX), @otherColumns NVARCHAR(MAX), @sql NVARCHAR(MAX);

-- Step 1: Get dynamic software column list (excluding Host, OS, Location)
SELECT @columns = STRING_AGG(QUOTENAME(name), ', ')
FROM sys.columns
WHERE object_id = OBJECT_ID('dw.HostSoftwarePivot') 
AND name NOT IN ('Host', 'OS', 'DMZ'); -- Exclude non-software columns

-- Step 2: Get additional columns (Host, OS, Location)
SELECT @otherColumns = STRING_AGG(QUOTENAME(name), ', ')
FROM sys.columns
WHERE object_id = OBJECT_ID('dw.HostSoftwarePivot') 
AND name IN ('Host', 'OS', 'DMZ'); -- Retain non-software columns

PRINT 'Software Columns: ' + @columns;
PRINT 'Other Columns: ' + @otherColumns;


-- Step 3: Build dynamic SQL
SET @sql = '
WITH Unpivoted AS (
    SELECT ' + @otherColumns + ', Software, SoftwareStatus
    FROM dw.HostSoftwarePivot
    UNPIVOT (
        SoftwareStatus FOR Software IN (' + @columns + ')
    ) AS UnpivotTable
    WHERE SoftwareStatus IS NOT NULL -- Ignore NULLs
),
SoftwareCounts AS (
    SELECT 
        ' + @otherColumns + ',
        Software, 
        COUNT(*) AS CountPerHost,
        COUNT(DISTINCT Host) OVER (PARTITION BY Software) AS DistinctHostCount
    FROM Unpivoted
    GROUP BY ' + @otherColumns + ', Software
),
PivotedCounts AS (
    SELECT ' + @otherColumns + ', ' + @columns + '
    FROM SoftwareCounts
    PIVOT (
        SUM(CountPerHost) FOR Software IN (' + @columns + ')
    ) AS PivotTable
)
-- Select original text-based data
SELECT * FROM dw.HostSoftwarePivot
UNION ALL
-- Append Count per Host row
SELECT ''Count per Host'', NULL, NULL, ' + 
    (SELECT STRING_AGG('SUM(CASE WHEN Software = ' + QUOTENAME(name, '''') + ' THEN CountPerHost ELSE 0 END)', ', ')
     FROM sys.columns 
     WHERE object_id = OBJECT_ID('dbo.SoftwareInventory') 
     AND name NOT IN ('Host', 'OS', 'Location')) + '
FROM SoftwareCounts
GROUP BY ' + @otherColumns + '
UNION ALL
-- Append Distinct Count per Software row
SELECT ''Distinct Count per Host'', NULL, NULL, ' + 
    (SELECT STRING_AGG('MAX(CASE WHEN Software = ' + QUOTENAME(name, '''') + ' THEN DistinctHostCount ELSE NULL END)', ', ')
     FROM sys.columns 
     WHERE object_id = OBJECT_ID('dbo.SoftwareInventory') 
     AND name NOT IN ('Host', 'OS', 'Location')) + '
FROM SoftwareCounts
UNION ALL
-- Append Total Count (SUM) row
SELECT ''Total Count (SUM)'', NULL, NULL, ' + 
    (SELECT STRING_AGG('SUM(' + QUOTENAME(name) + ')', ', ')
     FROM sys.columns 
     WHERE object_id = OBJECT_ID('dw.HostSoftwarePivot') 
     AND name NOT IN ('Host', 'OS', 'Location')) + '
FROM PivotedCounts;
';

Print @sql
-- Step 4: Execute the dynamic SQL
EXEC sp_executesql @sql;
