import duckdb

# Connect to an in-memory DuckDB database
con = duckdb.connect()

# Read and preview the CSV file
df = con.execute("SELECT * FROM 'your_file.csv'").fetchdf()

# Optional: See the first few rows
print(df.head())

CREATE TABLE my_table AS SELECT * FROM 'your_file.csv';
SELECT COUNT(*) FROM my_table;


import pandas as pd

# Read in chunks to avoid memory issues
chunk_size = 100000  # adjust based on your RAM
chunks = pd.read_csv('your_file.csv', chunksize=chunk_size)

for chunk in chunks:
    print(chunk.head())  # process each chunk


import dask.dataframe as dd
df = dd.read_csv('your_file.csv')
print(df.head())



✅ 1. File Path Is Incorrect
DuckDB won’t raise a clear error if the file doesn’t exist—it just silently returns no rows.

Check:

python
Copy
Edit
import os
print(os.path.exists('your_file.csv'))  # Should be True


Header Row Missing or Misread

df = duckdb.query("SELECT * FROM read_csv_auto('your_file.csv', header=True)").to_df()

Columns Have Unexpected Names
df = duckdb.query("SELECT * FROM 'your_file.csv' LIMIT 1").to_df()
print(df.columns)


import pandas as pd

# Set display to show all columns
pd.set_option('display.max_columns', None)

# Optional: Show all rows too (if needed)
# pd.set_option('display.max_rows', None)

# Example: Load a large CSV and display all columns
df = pd.read_csv('your_file.csv')
print(df.head())

pd.reset_option('display.max_columns')
pd.set_option('display.width', 0) 


chunks = pd.read_csv('your_file.csv', chunksize=100_000, low_memory=False)

results = []
for chunk in chunks:
    results.append(process_chunk(chunk))  # Define your own function
final_df = pd.concat(results)



import duckdb

# Connect to an in-memory DuckDB database
con = duckdb.connect()

# Execute SQL query on the CSV file (without loading it into memory)
df = con.execute("SELECT * FROM 'your_file.csv' LIMIT 10").fetchdf()

# Print the first 10 rows of the file
print(df)
# Query to select rows where the 'amount' column is greater than 1000
query = """
    SELECT *
    FROM 'your_file.csv'
    WHERE amount > 1000
    LIMIT 10
"""
filtered_df = con.execute(query).fetchdf()
print(filtered_df)
# Query to join two CSV files (for example, 'file1.csv' and 'file2.csv')
query = """
    SELECT *
    FROM 'file1.csv' AS f1
    JOIN 'file2.csv' AS f2
    ON f1.id = f2.id
"""
joined_df = con.execute(query).fetchdf()
print(joined_df)
query = """
    SELECT f1.column1, f1.column2, f2.column3
    FROM 'file1.csv' AS f1
    JOIN 'file2.csv' AS f2
    ON f1.id = f2.id
    LIMIT 10
"""
joined_df = con.execute(query).fetchdf()
print(joined_df)


